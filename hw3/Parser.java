/* Generated By:JavaCC: Do not edit this line. Parser.java */
import java.io.*;
import java.util.*;
import ast.*;

public class Parser implements ParserConstants {
  public static void main(String [] args) {
    if (args.length < 1) {
      System.out.println("Need a file name as command-line argument.");
      return;
    }
    try {
      FileReader input = new FileReader(args[0]);
      Ast.Program p = new Parser(input).Program();
      input.close();
      System.out.print(p);
    } catch (TokenMgrError e) {
      System.err.println(e);
    } catch (Exception e) {
      System.err.println(e);
    }
  }

//
// PARSER SECTION ---------------------------------------------------------------
//
// Helper function
  static final public Ast.Id Id() throws ParseException {
  Token tkn;
    tkn = jj_consume_token(ID);
             {if (true) return new Ast.Id(tkn.image);}
    throw new Error("Missing return statement in function");
  }

// Program -> {ClassDecl}
//
  static final public Ast.Program Program() throws ParseException {
  List<Ast.ClassDecl> cl = new ArrayList<Ast.ClassDecl>();
  Ast.ClassDecl c;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 6:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      c = ClassDecl();
                     cl.add(c);
    }
    jj_consume_token(0);
      {if (true) return new Ast.Program(cl);}
    throw new Error("Missing return statement in function");
  }

// ClassDecl -> "class" <ID> ["extends" <ID>] "{" {VarDecl} {"public" MethodDecl} "}"
//
  static final public Ast.ClassDecl ClassDecl() throws ParseException {
    List<Ast.VarDecl> vl = new ArrayList<Ast.VarDecl>();
    List<Ast.MethodDecl> ml = new ArrayList<Ast.MethodDecl>();
    Ast.VarDecl v;
    Ast.MethodDecl m;
    Ast.Id id, pid = null;
    jj_consume_token(6);
    id = Id();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      pid = Id();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(54);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 12:
      case 13:
      case 14:
      case ID:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      v = VarDecl();
                          vl.add(v);
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(9);
      m = MethodDecl();
                                  ml.add(m);
    }
    jj_consume_token(55);
     {if (true) return new Ast.ClassDecl(id.nm,pid==null?null:pid.nm,vl,ml);}
    throw new Error("Missing return statement in function");
  }

// MethodDecl -> ExtType <ID> "(" [Param {"," Param}] ")" 
//                 "{" {VarDecl} {Stmt} "}"
//            |  "static" "void" "main" "(" "String" "[" "]" <ID> ")"
//                 "{" {VarDecl} {Stmt} "}" 
// 
  static final public Ast.MethodDecl MethodDecl() throws ParseException {
    Ast.Type rt;
    Ast.Id id=null;
    List<Ast.Param> pl = new ArrayList<Ast.Param>();
    Ast.Param p;
    List<Ast.VarDecl> vl = new ArrayList<Ast.VarDecl>();
    Ast.VarDecl v;
    List<Ast.Stmt> sl = new ArrayList<Ast.Stmt>();
    Ast.Stmt s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 11:
    case 12:
    case 13:
    case 14:
    case ID:
      rt = ExtType();
      id = Id();
      jj_consume_token(50);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 12:
      case 13:
      case 14:
      case ID:
        p = Param();
                                        pl.add(p);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 48:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_4;
          }
          jj_consume_token(48);
          p = Param();
                                                                    pl.add(p);
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(51);
      jj_consume_token(54);
      label_5:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_5;
        }
        v = VarDecl();
                                         vl.add(v);
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 19:
        case 20:
        case 22:
        case 23:
        case 24:
        case ID:
        case 54:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_6;
        }
        s = Stmt();
                                                                   sl.add(s);
      }
      jj_consume_token(55);
    {if (true) return new Ast.MethodDecl(rt,id.toString(),pl,vl,sl);}
      break;
    case 8:
      jj_consume_token(8);
      jj_consume_token(11);
      jj_consume_token(10);
      jj_consume_token(50);
      jj_consume_token(15);
      jj_consume_token(52);
      jj_consume_token(53);
      id = Id();
               if (id !=null && !id.nm.equals("ignore"))
               {
                   p=new Ast.Param(new Ast.ArrayType(new Ast.ObjType("String")),id.toString());
                   pl.add(p);
               }
      jj_consume_token(51);
      jj_consume_token(54);
      label_7:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_7;
        }
        v = VarDecl();
                                          vl.add(v);
      }
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 19:
        case 20:
        case 22:
        case 23:
        case 24:
        case ID:
        case 54:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_8;
        }
        s = Stmt();
                                                                    sl.add(s);
      }
      jj_consume_token(55);
    {if (true) return new Ast.MethodDecl(null,"main",pl,vl,sl);}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// Param -> Type <ID> 
//
  static final public Ast.Param Param() throws ParseException {
  Ast.Type t;
  Ast.Id id;
    t = Type();
    id = Id();
    {if (true) return new Ast.Param(t,id.toString());}
    throw new Error("Missing return statement in function");
  }

// VarDecl -> Type <ID> ["=" Expr] ";"

//  
  static final public Ast.VarDecl VarDecl() throws ParseException {
    Ast.Type t;
    Ast.Id id;
    Ast.Exp exp=null;
    t = Type();
    id = Id();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 46:
      jj_consume_token(46);
      exp = Expr();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(47);
    {if (true) return new Ast.VarDecl(t,id.toString(),exp);}
    throw new Error("Missing return statement in function");
  }

// ExtType -> Type | "void"
//
  static final public Ast.Type ExtType() throws ParseException {
    Ast.Type t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 12:
    case 13:
    case 14:
    case ID:
      t = Type();
               {if (true) return t;}
      break;
    case 11:
      jj_consume_token(11);
             {if (true) return null;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// Type -> BasicType [ "[" "]" ]
//      |  <ID>
//
  static final public Ast.Type Type() throws ParseException {
    Ast.Type t;
    Ast.Id id;
    boolean helper=false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 12:
    case 13:
    case 14:
      t = BasicType();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 52:
        jj_consume_token(52);
        jj_consume_token(53);
                          helper=true;
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      if (helper)
          {if (true) return new Ast.ArrayType(t);}
      else
          {if (true) return t;}
      break;
    case ID:
      id = Id();
            {if (true) return new Ast.ObjType(id.toString());}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// BasicType -> "int" | "double" | "boolean"
//
  static final public Ast.Type BasicType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 13:
      jj_consume_token(13);
         {if (true) return new Ast.IntType();}
      break;
    case 14:
      jj_consume_token(14);
             {if (true) return new Ast.DblType();}
      break;
    case 12:
      jj_consume_token(12);
              {if (true) return new Ast.BoolType();}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// Stmt -> "{" {Stmt} "}"
//      |  ExtId ( ["[" Expr() "]"] "=" Expr()  
//               | "(" [Args()] ")" ) ";"  
//      |  "if" "(" Expr ")" Stmt ["else" Stmt]
//      |  "while" "(" Expr ")" Stmt
//      |  "System" "." "out" "." "println" "(" [PrArg] ")" ";"
//      |  "return" [Expr] ";"
//
  static final public Ast.Stmt Stmt() throws ParseException {
   List<Ast.Stmt> sl = new ArrayList<Ast.Stmt>();
   Ast.Exp field;
   Ast.Stmt s;
   Ast.Stmt s1=null; //else clause statement
   List<Ast.Exp> args = new ArrayList<Ast.Exp>();
   Ast.Exp e=null,e1=null,e2=null;
   Ast.Exp print=null;
   Ast.Exp ret=null;
   boolean helper=false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 54:
      jj_consume_token(54);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 19:
        case 20:
        case 22:
        case 23:
        case 24:
        case ID:
        case 54:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_9;
        }
        s = Stmt();
                 sl.add(s);
      }
      jj_consume_token(55);
                                     {if (true) return new Ast.Block(sl);}
      break;
    case 19:
    case ID:
      field = ExtId();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 46:
      case 52:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 52:
          jj_consume_token(52);
          e1 = Expr();
          jj_consume_token(53);
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        jj_consume_token(46);
        e2 = Expr();
        jj_consume_token(47);
                 // form of Id() "=" Expr() ";"
                 if(e1==null)
                 {
                     {if (true) return new Ast.Assign(field,e2);}
                 }
                 //form of Id() [ Expr() ] "=" Expr() ";"
                 else
                 {
                     {if (true) return new Ast.Assign(new Ast.ArrayElm(field,e1),e2);}
                 }
        break;
      case 50:
        jj_consume_token(50);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 16:
        case 17:
        case 18:
        case 19:
        case INTLIT:
        case DBLLIT:
        case ID:
        case 34:
        case 39:
        case 50:
          args = Args();
          break;
        default:
          jj_la1[16] = jj_gen;
          ;
        }
        jj_consume_token(51);
        jj_consume_token(47);
               //form of Id() "(" Args() ")" ";"
               if (field instanceof Ast.Field)
                   {if (true) return new
                   Ast.CallStmt(((Ast.Field)field).obj,((Ast.Field)field).nm,args);}
               else if (field instanceof Ast.Id)
                   {if (true) return new Ast.CallStmt(new Ast.This(),field.toString(),args);}
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case 20:
      jj_consume_token(20);
      jj_consume_token(50);
      e = Expr();
      jj_consume_token(51);
      s = Stmt();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 21:
        jj_consume_token(21);
        s1 = Stmt();
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
                                                     {if (true) return new Ast.If(e,s,s1);}
      break;
    case 22:
      jj_consume_token(22);
      jj_consume_token(50);
      e = Expr();
      jj_consume_token(51);
      s = Stmt();
                                     {if (true) return new Ast.While(e,s);}
      break;
    case 24:
      jj_consume_token(24);
      jj_consume_token(49);
      jj_consume_token(25);
      jj_consume_token(49);
      jj_consume_token(26);
      jj_consume_token(50);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
      case 17:
      case 18:
      case 19:
      case INTLIT:
      case DBLLIT:
      case STRLIT:
      case ID:
      case 34:
      case 39:
      case 50:
        print = PrArg();
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      jj_consume_token(51);
      jj_consume_token(47);
       {if (true) return new Ast.Print(print);}
      break;
    case 23:
      jj_consume_token(23);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
      case 17:
      case 18:
      case 19:
      case INTLIT:
      case DBLLIT:
      case ID:
      case 34:
      case 39:
      case 50:
        ret = Expr();
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      jj_consume_token(47);
                             {if (true) return new Ast.Return(ret);}
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//ExtId -> ["this" "." ] <ID> {"."  <ID> }
  static final public Ast.Exp ExtId() throws ParseException {
    Ast.Id id1,id2=null;
    Ast.Exp field=null,field2=null;
    boolean setThis = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 19:
      jj_consume_token(19);
      jj_consume_token(49);
                setThis=true;
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    id1 = Id();
        if (setThis)
           field=new Ast.Field(new Ast.This(),id1.toString());
    label_10:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_10;
      }
      jj_consume_token(49);
      field2 = ExtId();
            if (field !=null)
                field=new Ast.Field(field,field2.toString());
            else
                field=new Ast.Field(id1,field2.toString());
    }
        if (field != null)
            {if (true) return field;}
        else
            {if (true) return id1;}
    throw new Error("Missing return statement in function");
  }

/*
//ExprOrAssign -> "(" [Args] ")" ";"
//              | [ "[" Expr() "]" ] "=" Expr() ";"
Ast.Exp ExprOrAssign():{}
{
    "(" [Args()] ")" ";"
  | [ "[" Expr() "]" ] "=" Expr() ";"
}
*/

// Args -> Expr {"," Expr}
//
  static final public List<Ast.Exp> Args() throws ParseException {
    List<Ast.Exp> exps = new ArrayList<Ast.Exp>();
    Ast.Exp exp;
    exp = Expr();
             exps.add(exp);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 48:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_11;
      }
      jj_consume_token(48);
      exp = Expr();
                                             exps.add(exp);
    }
      {if (true) return exps;}
    throw new Error("Missing return statement in function");
  }

// PrArg -> Expr | <STRLIT>
//
  static final public Ast.Exp PrArg() throws ParseException {
    Ast.Exp e;
    Token tkn;
    String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 16:
    case 17:
    case 18:
    case 19:
    case INTLIT:
    case DBLLIT:
    case ID:
    case 34:
    case 39:
    case 50:
      e = Expr();
            {if (true) return e;}
      break;
    case STRLIT:
      tkn = jj_consume_token(STRLIT);
                s = tkn.image.substring(1);s=s.substring(0,s.length()-1);{if (true) return new Ast.StrLit(s);}
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// ExprNew -> BasicType "[" <INTLIT> "]"
//          | <ID> "(" ")"
  static final public Ast.Exp ExprNew() throws ParseException {
    Ast.Type t;
    Token tkn;
    Ast.Id id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 12:
    case 13:
    case 14:
      t = BasicType();
      jj_consume_token(52);
      tkn = jj_consume_token(INTLIT);
      jj_consume_token(53);
                                        {if (true) return new Ast.NewArray(t,Integer.parseInt(tkn.image));}
      break;
    case ID:
      id = Id();
      jj_consume_token(50);
      jj_consume_token(51);
                     {if (true) return new Ast.NewObj(id.nm);}
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// Expr -> AndRule {"||" AndRule}
  static final public Ast.Exp Expr() throws ParseException {
    Ast.Exp e1,e2;
    e1 = AndRule();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_12;
      }
      jj_consume_token(38);
      e2 = AndRule();
                                     e1=new Ast.Binop(Ast.BOP.OR,e1,e2);
    }
        {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

// AndRule -> CompRule {"&&" CompRule}
  static final public Ast.Exp AndRule() throws ParseException {
    Ast.Exp e1,e2;
    e1 = CompRule();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 37:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_13;
      }
      jj_consume_token(37);
      e2 = CompRule();
                                      e1=new Ast.Binop(Ast.BOP.AND,e1,e2);
    }
        {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

//CompRule -> AddSubRule {Compare AddSubRule}
  static final public Ast.Exp CompRule() throws ParseException {
    Ast.BOP op;
    Ast.Exp e1,e2;
    e1 = AddSubRule();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_14;
      }
      op = Compare();
      e2 = AddSubRule();
                                                  e1=new Ast.Binop(op,e1,e2);
    }
        {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

//Compare -> "==" | "!=" | "<" | "<=" | ">" | ">="
  static final public Ast.BOP Compare() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 40:
      jj_consume_token(40);
          {if (true) return Ast.BOP.EQ;}
      break;
    case 41:
      jj_consume_token(41);
          {if (true) return Ast.BOP.NE;}
      break;
    case 42:
      jj_consume_token(42);
          {if (true) return Ast.BOP.LT;}
      break;
    case 43:
      jj_consume_token(43);
          {if (true) return Ast.BOP.LE;}
      break;
    case 44:
      jj_consume_token(44);
          {if (true) return Ast.BOP.GT;}
      break;
    case 45:
      jj_consume_token(45);
          {if (true) return Ast.BOP.GE;}
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//AddSubRule -> MulDivRule {AddSub MulDivRule}
  static final public Ast.Exp AddSubRule() throws ParseException {
    Ast.BOP op;
    Ast.Exp e1,e2;
    e1 = MulDivRule();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 33:
      case 34:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_15;
      }
      op = AddSub();
      e2 = MulDivRule();
                                                 e1=new Ast.Binop(op,e1,e2);
    }
        {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.BOP AddSub() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 33:
      jj_consume_token(33);
         {if (true) return Ast.BOP.ADD;}
      break;
    case 34:
      jj_consume_token(34);
         {if (true) return Ast.BOP.SUB;}
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//MulDivRule -> UnOpRule {MulDiv UnOpRule}
  static final public Ast.Exp MulDivRule() throws ParseException {
    Ast.BOP op;
    Ast.Exp e1,e2;
    e1 = UnOpRule();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 35:
      case 36:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_16;
      }
      op = MulDiv();
      e2 = UnOpRule();
                                             e1=new Ast.Binop(op,e1,e2);
    }
        {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

//MulDiv -> "*" | "/"
  static final public Ast.BOP MulDiv() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 35:
      jj_consume_token(35);
         {if (true) return Ast.BOP.MUL;}
      break;
    case 36:
      jj_consume_token(36);
         {if (true) return Ast.BOP.DIV;}
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//UnOpRule -> UnOp MethodCallRule | MethodCallRule
  static final public Ast.Exp UnOpRule() throws ParseException {
    Ast.UOP up;
    Ast.Exp e1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 34:
    case 39:
      up = UnOp();
      e1 = UnOpRule();
                              {if (true) return new Ast.Unop(up,e1);}
      break;
    case 16:
    case 17:
    case 18:
    case 19:
    case INTLIT:
    case DBLLIT:
    case ID:
    case 50:
      e1 = MethodCallRule();
                          {if (true) return e1;}
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//UnOp -> "-" | "!"
  static final public Ast.UOP UnOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 34:
      jj_consume_token(34);
         {if (true) return Ast.UOP.NEG;}
      break;
    case 39:
      jj_consume_token(39);
         {if (true) return Ast.UOP.NOT;}
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//MethodCallRule -> ParensNewRule 
//               |  ExtId ( "(" [e=Args()] ")" | ["["e=Expr()"]"] )
  static final public Ast.Exp MethodCallRule() throws ParseException {
    Ast.Exp e=null;
    Ast.Exp field;
    List<Ast.Exp> exps = new ArrayList<Ast.Exp>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 16:
    case 17:
    case 18:
    case INTLIT:
    case DBLLIT:
    case 50:
      e = ParensNewRule();
                         {if (true) return e;}
      break;
    case 19:
    case ID:
      field = ExtId();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
        jj_consume_token(50);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 16:
        case 17:
        case 18:
        case 19:
        case INTLIT:
        case DBLLIT:
        case ID:
        case 34:
        case 39:
        case 50:
          exps = Args();
          break;
        default:
          jj_la1[36] = jj_gen;
          ;
        }
        jj_consume_token(51);
               if (field instanceof Ast.Field)
                    {if (true) return new
                    Ast.Call(((Ast.Field)field).obj,((Ast.Field)field).nm,exps);}
               else if (field instanceof Ast.Id)
                    {if (true) return new Ast.Call(new Ast.This(),field.toString(),exps);}
        break;
      default:
        jj_la1[38] = jj_gen;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 52:
          jj_consume_token(52);
          e = Expr();
          jj_consume_token(53);
          break;
        default:
          jj_la1[37] = jj_gen;
          ;
        }
               if (e != null)
                   {if (true) return new Ast.ArrayElm(field,e);}
               else
                   {if (true) return field;}
      }
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*
//ExprOrMethod -> "(" [Args] ")" | [ "[" Expr "]" ]
Ast.Exp ExprOrMethod():
{
    Ast.Exp e=null;
}
{
    "(" [ e=Args() ] ")" {} //method
  | ["[" e=Expr() "]" ]  {} //expression
}
*/

//ParensNewRule -> "(" Expr ")" | "new" ExprNew | Literal
  static final public Ast.Exp ParensNewRule() throws ParseException {
    Ast.Exp e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 50:
      jj_consume_token(50);
      e = Expr();
      jj_consume_token(51);
                      {if (true) return e;}
      break;
    case 18:
      jj_consume_token(18);
      e = ExprNew();
                       {if (true) return e;}
      break;
    case 16:
    case 17:
    case INTLIT:
    case DBLLIT:
      e = Literal();
                 {if (true) return e;}
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//Literal -> <INTLIT> | <DBLLIT> | "true" | "false"
  static final public Ast.Exp Literal() throws ParseException {
    Token tkn;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTLIT:
      //probably need to add checks for hex, octal, or int
          tkn = jj_consume_token(INTLIT);
                  {if (true) return new Ast.IntLit(Integer.parseInt(tkn.image));}
      break;
    case DBLLIT:
      tkn = jj_consume_token(DBLLIT);
                  {if (true) return new Ast.DblLit(Double.parseDouble(tkn.image));}
      break;
    case 16:
      jj_consume_token(16);
            {if (true) return new Ast.BoolLit(true);}
      break;
    case 17:
      jj_consume_token(17);
             {if (true) return new Ast.BoolLit(false);}
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_24()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_19()) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(49)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(12)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(14)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(52)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(13)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(19)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[42];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40,0x80,0x7000,0x200,0x0,0x7000,0x1d80000,0x1d80000,0x7900,0x0,0x7800,0x0,0x7000,0x7000,0x1d80000,0x0,0x600f0000,0x0,0x200000,0xe00f0000,0x600f0000,0x1d80000,0x80000,0x0,0xe00f0000,0x7000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x600f0000,0x0,0x600f0000,0x0,0x0,0x600f0000,0x60070000,0x60030000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x1,0x0,0x10000,0x1,0x400001,0x400001,0x1,0x4000,0x1,0x100000,0x1,0x0,0x400001,0x100000,0x40085,0x144000,0x0,0x40085,0x40085,0x400001,0x0,0x10000,0x40085,0x1,0x40,0x20,0x3f00,0x3f00,0x6,0x6,0x18,0x18,0x40085,0x84,0x40085,0x100000,0x40000,0x40001,0x40000,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[3];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[56];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 42; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 56; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
