Program    -> {ClassDecl}

ClassDecl  -> "class" <ID> ["extends" <ID>] "{" {VarDecl} {"public" MethodDecl} "}"

MethodDecl -> ExtType <ID> "(" [Param {"," Param}] ")" "{" {VarDecl} {Stmt} "}"
           |  "static" "void" "main" "(" "String" "[" "]" <ID> ")" "{" {VarDecl} {Stmt} "}"

Param      -> Type <ID>

VarDecl    -> Type <ID> ["=" Expr] ";"

ExtType    -> Type | "void"

Type       -> BasicType  ["[" "]"]             
           |  <ID>                          // object type

BasicType  -> "int" | "double" | "boolean"

Stmt       -> "{" {Stmt} "}"                         // stmt block
           |  ExtId ExpOrAssign ";"
           |  "if" "(" Expr ")" Stmt ["else" Stmt]    
           |  "while" "(" Expr ")" Stmt               
           |  "System" "." "out" "." "println" "(" [PrArg] ")" ";"  
           |  "return" [Expr] ";"

ExprOrAssign -> "(" [Args] ")" ";"
              | [ "[" Expr "]" ] "=" Expr ";"

Args       -> Expr {"," Expr}

PrArg      -> Expr | <STRLIT>

ExprNew    -> BasicType "[" <INTLIT> "]"
            | <ID> "(" ")"

Expr -> AndRule {"||" AndRule}

AndRule -> CompRule {"&&" CompRule}

CompRule -> AddSubRule {Compare AddSubRule} 

Compare -> "==" | "!=" | "<" | "<=" | ">" | ">=" 

AddSubRule -> MulDivRule {AddSub MulDivRule} 

AddSub -> "+" | "-"

MulDivRule -> UnOpRule {MulDiv UnOpRule} 

MulDiv -> "*" | "/"

UnOpRule -> UnOp UnOpRule  | MethodCallRule

UnOp -> "-" | "!"

MethodCallRule -> ParensNewRule | ExtId ExprOrMethod

ExprOrMethod -> "(" [Args] ")" | [ "[" Expr "]" ]

ParensNewRule -> "(" Expr ")" | "new" ExprNew | Literal

ExtId      -> ["this" "."] <ID> {"." <ID>}

Literal    -> <INTLIT> | <DBLLIT> | "true" | "false"
