/* Generated By:JavaCC: Do not edit this line. Lexer2Constants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface Lexer2Constants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int JUNK = 7;
  /** RegularExpression Id. */
  int ADD = 8;
  /** RegularExpression Id. */
  int SUB = 9;
  /** RegularExpression Id. */
  int MUL = 10;
  /** RegularExpression Id. */
  int DIV = 11;
  /** RegularExpression Id. */
  int AND = 12;
  /** RegularExpression Id. */
  int OR = 13;
  /** RegularExpression Id. */
  int NOT = 14;
  /** RegularExpression Id. */
  int EQ = 15;
  /** RegularExpression Id. */
  int NE = 16;
  /** RegularExpression Id. */
  int LT = 17;
  /** RegularExpression Id. */
  int LE = 18;
  /** RegularExpression Id. */
  int GT = 19;
  /** RegularExpression Id. */
  int GE = 20;
  /** RegularExpression Id. */
  int ASSGN = 21;
  /** RegularExpression Id. */
  int SEMI = 22;
  /** RegularExpression Id. */
  int COMMA = 23;
  /** RegularExpression Id. */
  int DOT = 24;
  /** RegularExpression Id. */
  int LPAREN = 25;
  /** RegularExpression Id. */
  int RPAREN = 26;
  /** RegularExpression Id. */
  int LBRAC = 27;
  /** RegularExpression Id. */
  int RBRAC = 28;
  /** RegularExpression Id. */
  int LCURLY = 29;
  /** RegularExpression Id. */
  int RCURLY = 30;
  /** RegularExpression Id. */
  int CLASS = 31;
  /** RegularExpression Id. */
  int EXTENDS = 32;
  /** RegularExpression Id. */
  int STATIC = 33;
  /** RegularExpression Id. */
  int PUBLIC = 34;
  /** RegularExpression Id. */
  int MAIN = 35;
  /** RegularExpression Id. */
  int VOID = 36;
  /** RegularExpression Id. */
  int BOOLEAN = 37;
  /** RegularExpression Id. */
  int INT = 38;
  /** RegularExpression Id. */
  int DOUBLE = 39;
  /** RegularExpression Id. */
  int STRING = 40;
  /** RegularExpression Id. */
  int TRUE = 41;
  /** RegularExpression Id. */
  int FALSE = 42;
  /** RegularExpression Id. */
  int NEW = 43;
  /** RegularExpression Id. */
  int THIS = 44;
  /** RegularExpression Id. */
  int IF = 45;
  /** RegularExpression Id. */
  int ELSE = 46;
  /** RegularExpression Id. */
  int WHILE = 47;
  /** RegularExpression Id. */
  int RETURN = 48;
  /** RegularExpression Id. */
  int SYSTEM = 49;
  /** RegularExpression Id. */
  int OUT = 50;
  /** RegularExpression Id. */
  int PRINTLN = 51;
  /** RegularExpression Id. */
  int LETTER = 52;
  /** RegularExpression Id. */
  int DIGIT = 53;
  /** RegularExpression Id. */
  int INTTMP = 54;
  /** RegularExpression Id. */
  int OCTTMP = 55;
  /** RegularExpression Id. */
  int HEXTMP = 56;
  /** RegularExpression Id. */
  int INTLIT = 57;
  /** RegularExpression Id. */
  int ID = 58;
  /** RegularExpression Id. */
  int DBLLIT = 59;
  /** RegularExpression Id. */
  int STRLIT = 60;
  /** RegularExpression Id. */
  int GARBAGE = 61;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "<JUNK>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"=\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"class\"",
    "\"extends\"",
    "\"static\"",
    "\"public\"",
    "\"main\"",
    "\"void\"",
    "\"boolean\"",
    "\"int\"",
    "\"double\"",
    "\"String\"",
    "\"true\"",
    "\"false\"",
    "\"new\"",
    "\"this\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"return\"",
    "\"System\"",
    "\"out\"",
    "\"println\"",
    "<LETTER>",
    "<DIGIT>",
    "<INTTMP>",
    "<OCTTMP>",
    "<HEXTMP>",
    "<INTLIT>",
    "<ID>",
    "<DBLLIT>",
    "<STRLIT>",
    "<GARBAGE>",
    "<token of kind 62>",
  };

}
